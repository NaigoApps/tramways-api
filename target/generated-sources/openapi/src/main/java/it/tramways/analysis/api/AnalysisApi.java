/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.tramways.analysis.api;

import it.tramways.analysis.api.model.Analysis;
import it.tramways.analysis.api.model.AnalysisDescription;
import it.tramways.analysis.api.model.AnalysisRequest;
import it.tramways.analysis.api.model.AnalysisResponse;
import it.tramways.analysis.api.model.AnalysisType;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-10-08T23:23:41.219515900+02:00[Europe/Berlin]")

@Validated
@Api(value = "analysis", description = "the analysis API")
public interface AnalysisApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /analysis/maps/{mapId}/{analysisId} : Deletes an analysis
     *
     * @param mapId  (required)
     * @param analysisId  (required)
     * @return  (status code 200)
     */
    @ApiOperation(value = "Deletes an analysis", nickname = "deleteAnalysis", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "analysis", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "") })
    @RequestMapping(value = "/analysis/maps/{mapId}/{analysisId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteAnalysis(@ApiParam(value = "",required=true) @PathVariable("mapId") String mapId,@ApiParam(value = "",required=true) @PathVariable("analysisId") String analysisId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /analysis/maps/{mapId}/{analysisId} : Gets an analysis
     *
     * @param mapId  (required)
     * @param analysisId  (required)
     * @return Ok (status code 200)
     */
    @ApiOperation(value = "Gets an analysis", nickname = "getAnalysis", notes = "", response = Analysis.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "analysis", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Analysis.class) })
    @RequestMapping(value = "/analysis/maps/{mapId}/{analysisId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Analysis> getAnalysis(@ApiParam(value = "",required=true) @PathVariable("mapId") String mapId,@ApiParam(value = "",required=true) @PathVariable("analysisId") String analysisId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /analysis/available : Gets available analysis for map
     *
     * @param projectId  (required)
     * @param mapId  (required)
     * @return Ok (status code 200)
     */
    @ApiOperation(value = "Gets available analysis for map", nickname = "getAvailableAnalysis", notes = "", response = AnalysisType.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "analysis", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = AnalysisType.class, responseContainer = "List") })
    @RequestMapping(value = "/analysis/available",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<AnalysisType>> getAvailableAnalysis(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "projectId", required = true) String projectId,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "mapId", required = true) String mapId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /analysis/maps/{mapId} : Gets a map analysis
     *
     * @param mapId  (required)
     * @return Ok (status code 200)
     */
    @ApiOperation(value = "Gets a map analysis", nickname = "getMapAnalysis", notes = "", response = AnalysisDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "analysis", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = AnalysisDescription.class, responseContainer = "List") })
    @RequestMapping(value = "/analysis/maps/{mapId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<AnalysisDescription>> getMapAnalysis(@ApiParam(value = "",required=true) @PathVariable("mapId") String mapId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /analysis/maps/{mapId}/launch : Launch selected analysis
     *
     * @param mapId  (required)
     * @param analysisRequest  (optional)
     * @return Ok (status code 200)
     */
    @ApiOperation(value = "Launch selected analysis", nickname = "launchAnalysis", notes = "", response = AnalysisResponse.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "analysis", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = AnalysisResponse.class) })
    @RequestMapping(value = "/analysis/maps/{mapId}/launch",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<AnalysisResponse> launchAnalysis(@ApiParam(value = "",required=true) @PathVariable("mapId") String mapId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) AnalysisRequest analysisRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"warnings\" : [ \"warnings\", \"warnings\" ], \"ok\" : true, \"parameters\" : [ { \"valid\" : true, \"propertyType\" : \"propertyType\", \"name\" : \"name\", \"description\" : \"description\" }, { \"valid\" : true, \"propertyType\" : \"propertyType\", \"name\" : \"name\", \"description\" : \"description\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
