/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.tramways.projects.api;

import it.tramways.projects.api.model.CreateMapRequest;
import it.tramways.projects.api.model.UpdateMapRequest;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-12-13T17:43:40.536531+01:00[Europe/Rome]")

@Validated
@Api(value = "projects", description = "the projects API")
public interface ProjectsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /projects/{projectId}/maps : Creates a map
     *
     * @param projectId  (required)
     * @param createMapRequest  (optional)
     * @return Ok (status code 200)
     */
    @ApiOperation(value = "Creates a map", nickname = "createMap", notes = "", response = it.tramways.roadmaps.api.model.RoadMap.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "projects", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = it.tramways.roadmaps.api.model.RoadMap.class) })
    @RequestMapping(value = "/projects/{projectId}/maps",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<it.tramways.roadmaps.api.model.RoadMap> createMap(@ApiParam(value = "",required=true) @PathVariable("projectId") String projectId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) CreateMapRequest createMapRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /projects/{projectId}/maps/{mapId} : Deletes a map
     *
     * @param projectId  (required)
     * @param mapId  (required)
     * @return Ok (status code 200)
     */
    @ApiOperation(value = "Deletes a map", nickname = "deleteMap", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "projects", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok") })
    @RequestMapping(value = "/projects/{projectId}/maps/{mapId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteMap(@ApiParam(value = "",required=true) @PathVariable("projectId") String projectId,@ApiParam(value = "",required=true) @PathVariable("mapId") String mapId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /projects/{projectId}/maps/{mapId} : Gets a map
     *
     * @param projectId  (required)
     * @param mapId  (required)
     * @return Ok (status code 200)
     */
    @ApiOperation(value = "Gets a map", nickname = "getMap", notes = "", response = it.tramways.roadmaps.api.model.RoadMap.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "projects", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = it.tramways.roadmaps.api.model.RoadMap.class) })
    @RequestMapping(value = "/projects/{projectId}/maps/{mapId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<it.tramways.roadmaps.api.model.RoadMap> getMap(@ApiParam(value = "",required=true) @PathVariable("projectId") String projectId,@ApiParam(value = "",required=true) @PathVariable("mapId") String mapId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /projects/{projectId}/maps/{mapId} : Updates a map
     *
     * @param projectId  (required)
     * @param mapId  (required)
     * @param updateMapRequest  (optional)
     * @return Ok (status code 200)
     */
    @ApiOperation(value = "Updates a map", nickname = "updateMap", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "projects", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok") })
    @RequestMapping(value = "/projects/{projectId}/maps/{mapId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateMap(@ApiParam(value = "",required=true) @PathVariable("projectId") String projectId,@ApiParam(value = "",required=true) @PathVariable("mapId") String mapId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) UpdateMapRequest updateMapRequest) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
